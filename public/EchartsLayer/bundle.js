!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("Animation",[],t):"object"==typeof exports?exports.Animation=t():e.Animation=t()}(window,(function(){return function(e){var t={};function o(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=t,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(i,r,function(t){return e[t]}.bind(null,r));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=2)}([function(e,t,o){"use strict";function i(e,t,o){void 0===o&&(o={});var i={type:"Feature"};return(0===o.id||o.id)&&(i.id=o.id),o.bbox&&(i.bbox=o.bbox),i.properties=t||{},i.geometry=e,i}function r(e,t,o){return void 0===o&&(o={}),i({type:"Point",coordinates:e},t,o)}function n(e,t,o){void 0===o&&(o={});for(var r=0,n=e;r<n.length;r++){var a=n[r];if(a.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var s=0;s<a[a.length-1].length;s++)if(a[a.length-1][s]!==a[0][s])throw new Error("First and last Position are not equivalent.")}return i({type:"Polygon",coordinates:e},t,o)}function a(e,t,o){if(void 0===o&&(o={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");return i({type:"LineString",coordinates:e},t,o)}function s(e,t){void 0===t&&(t={});var o={type:"FeatureCollection"};return t.id&&(o.id=t.id),t.bbox&&(o.bbox=t.bbox),o.features=e,o}function u(e,t,o){return void 0===o&&(o={}),i({type:"MultiLineString",coordinates:e},t,o)}function l(e,t,o){return void 0===o&&(o={}),i({type:"MultiPoint",coordinates:e},t,o)}function h(e,t,o){return void 0===o&&(o={}),i({type:"MultiPolygon",coordinates:e},t,o)}function p(e,o){void 0===o&&(o="kilometers");var i=t.factors[o];if(!i)throw new Error(o+" units is invalid");return e*i}function d(e,o){void 0===o&&(o="kilometers");var i=t.factors[o];if(!i)throw new Error(o+" units is invalid");return e/i}function c(e){return 180*(e%(2*Math.PI))/Math.PI}function f(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)&&!/^\s*$/.test(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.earthRadius=6371008.8,t.factors={centimeters:100*t.earthRadius,centimetres:100*t.earthRadius,degrees:t.earthRadius/111325,feet:3.28084*t.earthRadius,inches:39.37*t.earthRadius,kilometers:t.earthRadius/1e3,kilometres:t.earthRadius/1e3,meters:t.earthRadius,metres:t.earthRadius,miles:t.earthRadius/1609.344,millimeters:1e3*t.earthRadius,millimetres:1e3*t.earthRadius,nauticalmiles:t.earthRadius/1852,radians:1,yards:t.earthRadius/1.0936},t.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/t.earthRadius,yards:1/1.0936},t.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046},t.feature=i,t.geometry=function(e,t,o){switch(void 0===o&&(o={}),e){case"Point":return r(t).geometry;case"LineString":return a(t).geometry;case"Polygon":return n(t).geometry;case"MultiPoint":return l(t).geometry;case"MultiLineString":return u(t).geometry;case"MultiPolygon":return h(t).geometry;default:throw new Error(e+" is invalid")}},t.point=r,t.points=function(e,t,o){return void 0===o&&(o={}),s(e.map((function(e){return r(e,t)})),o)},t.polygon=n,t.polygons=function(e,t,o){return void 0===o&&(o={}),s(e.map((function(e){return n(e,t)})),o)},t.lineString=a,t.lineStrings=function(e,t,o){return void 0===o&&(o={}),s(e.map((function(e){return a(e,t)})),o)},t.featureCollection=s,t.multiLineString=u,t.multiPoint=l,t.multiPolygon=h,t.geometryCollection=function(e,t,o){return void 0===o&&(o={}),i({type:"GeometryCollection",geometries:e},t,o)},t.round=function(e,t){if(void 0===t&&(t=0),t&&!(t>=0))throw new Error("precision must be a positive number");var o=Math.pow(10,t||0);return Math.round(e*o)/o},t.radiansToLength=p,t.lengthToRadians=d,t.lengthToDegrees=function(e,t){return c(d(e,t))},t.bearingToAzimuth=function(e){var t=e%360;return t<0&&(t+=360),t},t.radiansToDegrees=c,t.degreesToRadians=function(e){return e%360*Math.PI/180},t.convertLength=function(e,t,o){if(void 0===t&&(t="kilometers"),void 0===o&&(o="kilometers"),!(e>=0))throw new Error("length must be a positive number");return p(d(e,t),o)},t.convertArea=function(e,o,i){if(void 0===o&&(o="meters"),void 0===i&&(i="kilometers"),!(e>=0))throw new Error("area must be a positive number");var r=t.areaFactors[o];if(!r)throw new Error("invalid original units");var n=t.areaFactors[i];if(!n)throw new Error("invalid final units");return e/r*n},t.isNumber=f,t.isObject=function(e){return!!e&&e.constructor===Object},t.validateBBox=function(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((function(e){if(!f(e))throw new Error("bbox must only contain numbers")}))},t.validateId=function(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")},t.radians2degrees=function(){throw new Error("method has been renamed to `radiansToDegrees`")},t.degrees2radians=function(){throw new Error("method has been renamed to `degreesToRadians`")},t.distanceToDegrees=function(){throw new Error("method has been renamed to `lengthToDegrees`")},t.distanceToRadians=function(){throw new Error("method has been renamed to `lengthToRadians`")},t.radiansToDistance=function(){throw new Error("method has been renamed to `radiansToLength`")},t.bearingToAngle=function(){throw new Error("method has been renamed to `bearingToAzimuth`")},t.convertDistance=function(){throw new Error("method has been renamed to `convertLength`")}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(0);t.getCoord=function(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return e.geometry.coordinates;if("Point"===e.type)return e.coordinates}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return e;throw new Error("coord must be GeoJSON Point or an Array of numbers")},t.getCoords=function(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")},t.containsNumber=function e(t){if(t.length>1&&i.isNumber(t[0])&&i.isNumber(t[1]))return!0;if(Array.isArray(t[0])&&t[0].length)return e(t[0]);throw new Error("coordinates must only contain numbers")},t.geojsonType=function(e,t,o){if(!t||!o)throw new Error("type and name required");if(!e||e.type!==t)throw new Error("Invalid input to "+o+": must be a "+t+", given "+e.type)},t.featureOf=function(e,t,o){if(!e)throw new Error("No feature passed");if(!o)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+o+", Feature with geometry required");if(!e.geometry||e.geometry.type!==t)throw new Error("Invalid input to "+o+": must be a "+t+", given "+e.geometry.type)},t.collectionOf=function(e,t,o){if(!e)throw new Error("No featureCollection passed");if(!o)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+o+", FeatureCollection required");for(var i=0,r=e.features;i<r.length;i++){var n=r[i];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+o+", Feature with geometry required");if(!n.geometry||n.geometry.type!==t)throw new Error("Invalid input to "+o+": must be a "+t+", given "+n.geometry.type)}},t.getGeom=function(e){return"Feature"===e.type?e.geometry:e},t.getType=function(e,t){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}},function(e,t,o){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,o,i){void 0===i&&(i=o),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,i){void 0===i&&(i=o),e[i]=t[o]}),r=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||t.hasOwnProperty(o)||i(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),r(o(3),t);var n=new(function(){function e(e,t,o){this.area=t*o,this.color="pink"}return e.prototype.shoutout=function(){return"I'm "+this.color+" with an area of "+this.area+" cm squared."},e}())("square",30,30);console.log(n.shoutout()),console.log("Area of Shape: "+n.area),console.log("Color of Shape: "+n.color)},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ElectricAnimationM=void 0;var i=o(0),r=o(4),n=o(5),a=o(6),s=o(7),u=function(){function e(e,t,o,s){var u=this;this.map=null,this.isRemoved=!1,this.animationHandle=null,this.backgroundLayerIds=[],this.option={speed:40,speedratio:1,enablezoomspeed:!1,model:"0",minzoom:0,maxzoom:22,color:{1:"rgba(255,255,0,1)",.5:"rgba(100,100,0,0.5)",.1:"rgba(100,100,0,0.2)"},pointsize:11,pointradius:1,linelength:50,linewidth:1,backgroundcolor:"#000000",backgroundopacity:1,backgroundwidth:1},this.lineLayerIds=[],this.lineStep=[],this.lineStepDistance=[],this.lineStepCountDistance=[],this.lineTailStep=[],this.lineOriginPosition=null,this.lineSamplePositions=null,this.lineGradient=[],this.pointSamplePositions=[],this.pointSampleLayerIds=[],this.pointColors=[],this.pointFeaturesRange=[],this.pointSingleSampleStep=[],this.samplingPoint=function(){for(var e=u.option.speed,t="rgba(255,255,255,0)",o=u.option.enablezoomspeed?u.option.minzoom:0,s=u.option.enablezoomspeed?u.option.maxzoom:1,l=o;l<s;l++){for(var h={type:"FeatureCollection",features:[]},p=[],d=[],c=0;c<u.destPositions.features.length;c++){if(d.push(Math.floor(10*Math.random())%u.pointColors.length),u.destPositions.features[c].geometry.coordinates.length<=1)return;var f=h.features.length,m=h.features.length;h.features.push({type:"Feature",geometry:{type:"Point",coordinates:u.destPositions.features[c].geometry.coordinates[0]},properties:{color:t}});for(var g=0,y=!1,v=1;v<u.destPositions.features[c].geometry.coordinates.length;v++){var M=i.point(u.destPositions.features[c].geometry.coordinates[v-1]),b=i.point(u.destPositions.features[c].geometry.coordinates[v]),w=a.default(M,b),P=Math.floor(w/e),S=r.default(M,b);if(y)if(g+w>=e){var T={type:"Feature",geometry:{type:"Point",coordinates:[(F=n.default(M,e-g,S)).geometry.coordinates[0],F.geometry.coordinates[1]]},properties:{color:t}};h.features.push(T),M=F,w=w+g-e,P=Math.floor(w/e),y=!1,S=r.default(M,b)}else y=!0,g=w+g;if(!y){for(var L=0;L<P;L++){var F;T={type:"Feature",geometry:{type:"Point",coordinates:[(F=n.default(M,e,S)).geometry.coordinates[0],F.geometry.coordinates[1]]},properties:{color:t}};h.features.push(T),M=F,S=r.default(M,b)}w%e>0&&(y=!0,g=w-e*P)}}y&&h.features.push({type:"Feature",geometry:{type:"Point",coordinates:u.destPositions.features[c].geometry.coordinates[u.destPositions.features[c].geometry.coordinates.length-1]},properties:{color:t}}),m=h.features.length,p.push([f,m])}u.pointFeaturesRange.push(p),u.pointSingleSampleStep.push(d),u.pointSamplePositions.push(h),e/=u.option.speedratio}},this.samplingLine=function(){var e=u.option.speed;u.lineSamplePositions={type:"FeatureCollection",features:[]};for(var t=0;t<u.destPositions.features.length;t++){if(u.destPositions.features[t].geometry.coordinates.length<=1)return;var o={type:"Feature",geometry:{type:"LineString",coordinates:[]}};o.geometry.coordinates.push(u.destPositions.features[t].geometry.coordinates[0]);for(var s=[],l=1;l<u.destPositions.features[t].geometry.coordinates.length;l++){for(var h=i.point(u.destPositions.features[t].geometry.coordinates[l-1]),p=i.point(u.destPositions.features[t].geometry.coordinates[l]),d=a.default(h,p),c=Math.floor(d/e),f=r.default(h,p),m=0;m<c;m++){var g=n.default(h,e,f);o.geometry.coordinates.push([g.geometry.coordinates[0],g.geometry.coordinates[1]]),h=g,s.push(e),f=r.default(h,p)}if(d%e>0||d%e==0&&0==c){o.geometry.coordinates.push(u.destPositions.features[t].geometry.coordinates[l]);var y=i.point(u.destPositions.features[t].geometry.coordinates[l]),v=a.default(h,y);s.push(v)}}u.lineSamplePositions.features.push(o),u.lineStepDistance.push(s)}},this.animateByLineModel=function(e){var t=Date.now();if(t-u.lastTime>50){var o=Math.floor(u.map.getZoom());if(o>=u.option.minzoom&&o<u.option.maxzoom){for(var i=0;i<u.lineOriginPosition.features.length;i++)if(u.lineStep[i]<u.lineSamplePositions.features[i].geometry.coordinates.length){var r=u.lineSamplePositions.features[i].geometry.coordinates[u.lineStep[i]][0],n=u.lineSamplePositions.features[i].geometry.coordinates[u.lineStep[i]][1],a=u.lineStepDistance[i][u.lineStep[i]-1];do{u.lineOriginPosition.features[i].geometry.coordinates.push([r,n]),u.lineStepCountDistance[i]+=u.lineStepDistance[i][u.lineStep[i]-1],u.lineStep[i]=u.lineStep[i]+1,a+=u.lineStepDistance[i][u.lineStep[i]-1],u.lineStepCountDistance[i]>u.option.linelength&&u.lineOriginPosition.features[i].geometry.coordinates.length>3&&(u.lineOriginPosition.features[i].geometry.coordinates.shift(),u.lineStepCountDistance[i]-=u.lineStepDistance[i][u.lineTailStep[i]],u.lineTailStep[i]++),u.lineStep[i]<u.lineSamplePositions.features[i].geometry.coordinates.length&&(r=u.lineSamplePositions.features[i].geometry.coordinates[u.lineStep[i]][0],n=u.lineSamplePositions.features[i].geometry.coordinates[u.lineStep[i]][1])}while(u.option.speed>a&&u.lineStep[i]<u.lineSamplePositions.features[i].geometry.coordinates.length)}else if(u.lineOriginPosition.features[i].geometry.coordinates.length>2){a=0;do{a+=u.lineStepDistance[i][u.lineTailStep[i]],u.lineTailStep[i]++,u.lineOriginPosition.features[i].geometry.coordinates.shift()}while(u.option.speed>a)}else{var s=u.lineSamplePositions.features[i].geometry.coordinates[0];u.lineOriginPosition.features[i].geometry.coordinates=[],u.lineOriginPosition.features[i].geometry.coordinates.push([s[0],s[1]]),u.lineStep[i]=1,u.lineStepCountDistance[i]=0,u.lineTailStep[i]=0}var l=u.map.getSource(u.lineLayerIds[0]);null!=l&&l.setData(u.lineOriginPosition),u.lastTime=t}}u.animationHandle=requestAnimationFrame(u.animateByLineModel)},this.animateByPointModel=function(e){var t=Date.now();if(t-u.lastTime>50){var o=Math.floor(u.map.getZoom());if(o>=u.option.minzoom&&o<u.option.maxzoom){for(var i=u.option.enablezoomspeed?o-u.option.minzoom:0,r=0;r<u.pointFeaturesRange[i].length;r++){for(var n=u.pointFeaturesRange[i][r][0],a=u.pointFeaturesRange[i][r][1],s=u.pointSingleSampleStep[i][r],l=a-1;n<=l;)u.pointSamplePositions[i].features[l].properties.color=u.pointColors[s],s=(s+1)%u.pointColors.length,l--;u.pointSingleSampleStep[i][r]=(u.pointSingleSampleStep[i][r]+1)%u.pointColors.length}var h=u.map.getSource(u.pointSampleLayerIds[i]);null!=h&&h.setData(u.pointSamplePositions[i])}u.lastTime=t}u.animationHandle=requestAnimationFrame(u.animateByPointModel)},window.requestAnimationFrame=window.requestAnimationFrame||function(e){return setTimeout(e,1e3/60)},window.cancelAnimationFrame=window.cancelAnimationFrame||clearTimeout,this.map=e,this.initOption(o),this.initDestPosition(t,(function(){"0"==u.option.model?(u.samplingPoint(),u.initPointBackgroundLayer(),u.initPointLayer()):(u.initOriginPosition(),u.samplingLine(),u.initLineBackgroundLayer(),u.initLineLayer()),s&&s(u)}))}return e.prototype.initOption=function(e){this.option=this.extend(this.option,e),this.initColor(e.color,e.model)},e.prototype.initColor=function(e,t){null==e||null==typeof e?e=this.option.color:this.option.color=e;var o=[],i=[];if("string"==typeof e){var r=this.parseRgba(e);o.push(0),i.push(r),o.push(1),i.push(r)}else{var n=[];for(var a in e)n.push(a);n.sort((function(e,t){var o=parseFloat(e),i=parseFloat(t);return o>i?1:o==i?0:-1}));for(var s=0;s<n.length;s++){var u=parseFloat(n[s]);u>1?u=1:u<0&&(u=0),o.push(u),i.push(this.parseRgba(e[n[s]]))}}if("0"==t){var l=this.option.pointsize;o.length>=2&&(o[0]>o[e.length-1]&&o[e.length-1]>0?(o.push(0),i.push(i[i.length-1])):o[0]<o[e.length-1]&&o[0]>0&&(o.splice(0,0,0),i.splice(0,0,i[i.length-1])));for(s=1;s<o.length;s++)for(var h=Math.floor(o[s-1]*l),p=Math.floor(o[s]*l),d=p-h,c=(i[s][0]-i[s-1][0])/d,f=(i[s][1]-i[s-1][1])/d,m=(i[s][2]-i[s-1][2])/d,g=(i[s][3]-i[s-1][3])/d,y=0;d>0?h<p:h>p;){var v=d>0?1:-1,M=Math.floor(i[s-1][0]+c*y*v),b=Math.floor(i[s-1][1]+f*y*v),w=Math.floor(i[s-1][2]+m*y*v),P=i[s-1][3]+g*y*v;this.pointColors.push("rgba("+M+","+b+","+w+","+P+")"),d>0?h++:h--,y++}this.pointColors.reverse()}else{this.lineGradient.push("interpolate"),this.lineGradient.push(["linear"]),this.lineGradient.push(["line-progress"]);for(s=0;s<o.length;s++){this.lineGradient.push(o[s]);M=Math.floor(i[s][0]),b=Math.floor(i[s][1]),w=Math.floor(i[s][2]),P=i[s][3];this.lineGradient.push("rgba("+M+","+b+","+w+","+P+")")}}},e.prototype.startsWith=function(e,t){if(null==e||null==typeof e||0==e.length)return!1;if(null==t||null==typeof t||0==t.length)return!1;if(e.length<t.length)return!1;for(var o=0;o<t.length;o++)if(t[o]!=e[o])return!1;return!0},e.prototype.parseRgba=function(e){var t=[];if(this.startsWith(e,"#")){for(var o=e.substr("#".length),i=1;i<o.length;i+=2){var r=o.slice(i-1,i+1);t.push(parseInt(r,16))}t.length<=3&&t.push(1)}else if(this.startsWith(e,"rgb")){o="";this.startsWith(e,"rgba")&&(o=e.slice("rgba(".length+1,e.length-1));var n=(o=e.slice("rgb(".length+1,e.length-1)).split(",");for(i=n.length-1;i<3;i++)n.push("255");n.length<=3&&n.push("1.0");for(i=0;i<n.length;i++)if(3==i){var a=parseFloat(n[i]);a>1?a=1:a<0&&(a=0),t.push(a)}else{var s=parseInt(n[i]);s>255?s=255:s<0&&(s=0),t.push(s)}}return t},e.prototype.initDestPosition=function(e,t){if("object"==typeof e&&"device"==e.type);else this.initDestPositionByGeojson(e),t()},e.prototype.getWG84Coordinate=function(e){for(var t=e.trim().split(" "),o=new Array(Math.ceil(t.length/2)),i=0;i<o.length;i++){o[i]=new Array;for(var r=0;r<2;r++)o[i][r]=""}for(var n=0;n<t.length;n++)o[parseInt((n/2).toString())][n%2]=t[n];for(var a=[],u=0;u<o.length;u++){var l=o[u],h=s.Coordinate.MercatorToWgs84(l);a.push(h)}return a},e.prototype.queryDeviceByFeeder=function(e,t){},e.prototype.initDestPositionByGeojson=function(e){var t=e;Array.isArray(e)||(t=[e]),this.destPositions={type:"FeatureCollection",features:[]};for(var o=0,i=t;o<i.length;o++)for(var r=0,n=i[o].features;r<n.length;r++){for(var a={type:"Feature",geometry:{type:"LineString",coordinates:[]}},s=0,u=n[r].geometry.coordinates;s<u.length;s++){var l=u[s];a.geometry.coordinates.push([l[0],l[1]])}this.destPositions.features.push(a)}},e.prototype.initOriginPosition=function(){var e=0;for(this.lineOriginPosition={type:"FeatureCollection",features:[]},e=0;e<this.destPositions.features.length;e++){var t=this.destPositions.features[e];this.lineOriginPosition.features.push({type:"Feature",geometry:{type:"LineString",coordinates:[[t.geometry.coordinates[0][0],t.geometry.coordinates[0][1]]]}}),this.lineStep.push(1),this.lineStepCountDistance.push(0),this.lineTailStep.push(0)}},e.prototype.initLineLayer=function(){var e="electric-animation-"+Math.floor(1e4*Math.random()),t={id:e,type:"line",source:{type:"geojson",data:this.lineOriginPosition,lineMetrics:!0},layout:{"line-cap":"round","line-join":"round"},paint:{"line-width":this.option.linewidth,"line-gradient":this.lineGradient},maxzoom:this.option.maxzoom,minzoom:this.option.minzoom};this.map.addLayer(t),this.lineLayerIds.push(e)},e.prototype.initPointLayer=function(){for(var e=0;e<this.pointSamplePositions.length;e++){var t="electric-animation-bottom-sample-"+Math.floor(1e4*Math.random())+e,o={id:t,type:"circle",source:{type:"geojson",data:this.pointSamplePositions[e]},paint:{"circle-color":["get","color"],"circle-radius":this.option.pointradius,"circle-opacity":1}};this.option.enablezoomspeed?(o.maxzoom=this.option.minzoom+e+1,o.minzoom=this.option.minzoom+e):(o.maxzoom=this.option.maxzoom,o.minzoom=this.option.minzoom),this.map.addLayer(o),this.pointSampleLayerIds.push(t)}},e.prototype.initPointBackgroundLayer=function(){var e="electric-animation-bottom-"+Math.floor(1e4*Math.random()),t={id:e,type:"line",source:{type:"geojson",data:this.destPositions},layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":this.option.backgroundcolor,"line-width":this.option.backgroundwidth,"line-opacity":this.option.backgroundopacity},maxzoom:this.option.maxzoom,minzoom:this.option.minzoom};this.map.addLayer(t),this.backgroundLayerIds.push(e)},e.prototype.initLineBackgroundLayer=function(){var e="electric-animation-bottom-"+Math.floor(1e4*Math.random()),t={id:e,type:"line",source:{type:"geojson",data:this.destPositions},paint:{"line-color":this.option.backgroundcolor,"line-width":this.option.backgroundwidth,"line-opacity":this.option.backgroundopacity},maxzoom:this.option.maxzoom,minzoom:this.option.minzoom};this.map.addLayer(t),this.backgroundLayerIds.push(e)},e.prototype.start=function(){null!=this.map&&(this.isRemoved||(this.stop(),this.lastTime=Date.now(),"0"===this.option.model?this.animateByPointModel(0):this.animateByLineModel(0)))},e.prototype.stop=function(){null!=this.map&&(this.isRemoved||null!=this.animationHandle&&null!=typeof this.animationHandle&&(cancelAnimationFrame(this.animationHandle),this.animationHandle=null))},e.prototype.remove=function(){if(null!=this.map){if(this.stop(),this.isRemoved=!0,"0"==this.option.model)for(var e=0,t=this.pointSampleLayerIds;e<t.length;e++){var o=t[e];this.map.removeLayer(o),this.map.removeSource(o)}else for(var i=0,r=this.lineLayerIds;i<r.length;i++){o=r[i];this.map.removeLayer(o),this.map.removeSource(o)}for(var n=0,a=this.backgroundLayerIds;n<a.length;n++){o=a[n];this.map.removeLayer(o),this.map.removeSource(o)}}},e.prototype.extend=function(e,t){if(null==e||void 0===e)return t;var o={};for(var i in e)o[i]=e[i];for(var i in t)o[i]=t[i];return o},e}();t.ElectricAnimationM=u},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(0),r=o(1);function n(e,t,o){if(void 0===o&&(o={}),!0===o.final)return function(e,t){var o=n(t,e);return o=(o+180)%360}(e,t);var a=r.getCoord(e),s=r.getCoord(t),u=i.degreesToRadians(a[0]),l=i.degreesToRadians(s[0]),h=i.degreesToRadians(a[1]),p=i.degreesToRadians(s[1]),d=Math.sin(l-u)*Math.cos(p),c=Math.cos(h)*Math.sin(p)-Math.sin(h)*Math.cos(p)*Math.cos(l-u);return i.radiansToDegrees(Math.atan2(d,c))}t.default=n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(0),r=o(1);t.default=function(e,t,o,n){void 0===n&&(n={});var a=r.getCoord(e),s=i.degreesToRadians(a[0]),u=i.degreesToRadians(a[1]),l=i.degreesToRadians(o),h=i.lengthToRadians(t,n.units),p=Math.asin(Math.sin(u)*Math.cos(h)+Math.cos(u)*Math.sin(h)*Math.cos(l)),d=s+Math.atan2(Math.sin(l)*Math.sin(h)*Math.cos(u),Math.cos(h)-Math.sin(u)*Math.sin(p)),c=i.radiansToDegrees(d),f=i.radiansToDegrees(p);return i.point([c,f],n.properties)}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(1),r=o(0);t.default=function(e,t,o){void 0===o&&(o={});var n=i.getCoord(e),a=i.getCoord(t),s=r.degreesToRadians(a[1]-n[1]),u=r.degreesToRadians(a[0]-n[0]),l=r.degreesToRadians(n[1]),h=r.degreesToRadians(a[1]),p=Math.pow(Math.sin(s/2),2)+Math.pow(Math.sin(u/2),2)*Math.cos(l)*Math.cos(h);return r.radiansToLength(2*Math.atan2(Math.sqrt(p),Math.sqrt(1-p)),o.units)}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Coordinate=void 0;var i=3.141592653589793,r=6378245,n=.006693421622965943,a=function(){function e(){}return e.Wgs84Togcj02=function(e,t){if(t=+t,e=+e,this.out_of_china(e,t))return[e,t];var o=this.transformlat(e-105,t-35),a=this.transformlng(e-105,t-35),s=t/180*i,u=Math.sin(s);u=1-n*u*u;var l=Math.sqrt(u);return o=180*o/(r*(1-n)/(u*l)*i),[e+(a=180*a/(r/l*Math.cos(s)*i)),t+o]},e.Gcj02ToWgs84=function(e,t){if(t=+t,e=+e,this.out_of_china(e,t))return[e,t];var o=this.transformlat(e-105,t-35),a=this.transformlng(e-105,t-35),s=t/180*i,u=Math.sin(s);u=1-n*u*u;var l=Math.sqrt(u);return o=180*o/(r*(1-n)/(u*l)*i),[2*e-(e+(a=180*a/(r/l*Math.cos(s)*i))),2*t-(t+o)]},e.transformlat=function(e,t){var o=2*(e=+e)-100+3*(t=+t)+.2*t*t+.1*e*t+.2*Math.sqrt(Math.abs(e));return o+=2*(20*Math.sin(6*e*i)+20*Math.sin(2*e*i))/3,o+=2*(20*Math.sin(t*i)+40*Math.sin(t/3*i))/3,o+=2*(160*Math.sin(t/12*i)+320*Math.sin(t*i/30))/3},e.transformlng=function(e,t){var o=300+(e=+e)+2*(t=+t)+.1*e*e+.1*e*t+.1*Math.sqrt(Math.abs(e));return o+=2*(20*Math.sin(6*e*i)+20*Math.sin(2*e*i))/3,o+=2*(20*Math.sin(e*i)+40*Math.sin(e/3*i))/3,o+=2*(150*Math.sin(e/12*i)+300*Math.sin(e/30*i))/3},e.out_of_china=function(e,t){return t=+t,!((e=+e)>73.66&&e<135.05&&t>3.86&&t<53.55)},e.Wgs84ToMercator=function(e){var t=Math.PI/180,o=6378137,i=20037508.342789244,r=[o*(Math.abs(e[0])<=180?e[0]:e[0]-360*(e[0]<0?-1:e[0]>0?1:0))*t,o*Math.log(Math.tan(.25*Math.PI+.5*e[1]*t))];return r[0]>i&&(r[0]=i),r[0]<-i&&(r[0]=-i),r[1]>i&&(r[1]=i),r[1]<-i&&(r[1]=-i),r},e.Wgs84ToMercatorDtats=function(e){for(var t=[],o=Math.PI/180,i=6378137,r=20037508.342789244,n=0;n<e.length;n++){var a=[i*(Math.abs(e[n][0])<=180?e[n][0]:e[n][0]-360*(e[n][0]<0?-1:e[n][0]>0?1:0))*o,i*Math.log(Math.tan(.25*Math.PI+.5*e[n][1]*o))];a[0]>r&&(a[0]=r),a[0]<-r&&(a[0]=-r),a[1]>r&&(a[1]=r),a[1]<-r&&(a[1]=-r),t.push(a)}return t},e.MercatorToWgs84=function(e){var t=180/Math.PI,o=6378137;e[0],Math.PI,Math.atan(Math.exp(-e[1]/o));return[e[0]*t/o,(.5*Math.PI-2*Math.atan(Math.exp(-e[1]/o)))*t]},e.MercatorToWgs84Datas=function(e){for(var t=180/Math.PI,o=6378137,i=[],r=0;r<e.length;r++)i.push([e[r][0]*t/o,(.5*Math.PI-2*Math.atan(Math.exp(-e[r][1]/o)))*t]);return i},e.Wgs84ToDegreeSeconds=function(e){e=Math.abs(e);var t=Math.floor(e);return t+"°"+Math.floor(60*(e-t))+"'"+Math.round(3600*(e-t)%60)+'"'},e.DegreeSecondsToWgs84=function(e){var t=Number(e.split("°")[0]),o=Number(e.split("°")[1].split("'")[0]),i=Number(e.split("°")[1].split("'")[1].split('"')[0]);return Math.abs(t)+(Math.abs(o)/60+Math.abs(i)/3600)},e}();t.Coordinate=a}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,